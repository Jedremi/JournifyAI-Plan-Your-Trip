This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-02T04:55:13.788Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
api/
  generatePlan/
    route.tsx
components/
  HeroSection.tsx
  LoadingAnimation.tsx
  TravelPlannerForm.tsx
  TripPlan.tsx
plan/
  page.tsx
Footer.tsx
globals.css
Header.tsx
layout.tsx
nature-overlay.jpg:Zone.Identifier
page.tsx
travel-background.jpg:Zone.Identifier
traveler.png:Zone.Identifier

================================================================
Repository Files
================================================================

================
File: api/generatePlan/route.tsx
================
import { NextResponse } from 'next/server';
import OpenAI from 'openai';
import fs from 'fs/promises';
import path from 'path';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

async function logRequest(requestData: any, responseData: any, success: boolean, statusCode: number) {
    const logEntry = {
      timestamp: new Date().toISOString(),
      request: requestData,
      response: responseData,
      success,
      statusCode,
    };
  
    const logFilePath = path.join(process.cwd(), 'logs', 'requests.json');
  
    try {
      await fs.mkdir(path.dirname(logFilePath), { recursive: true });
      
      let existingLogs = [];
      try {
        const fileContent = await fs.readFile(logFilePath, 'utf-8');
        existingLogs = JSON.parse(fileContent);
      } catch (error) {
        // File doesn't exist or is empty, start with an empty array
      }
  
      existingLogs.push(logEntry);
  
      await fs.writeFile(logFilePath, JSON.stringify(existingLogs, null, 2));
    } catch (error) {
      console.error('Error writing to log file:', error);
    }
  }

export async function POST(request: Request) {
  const { destination, startDate, endDate, budget } = await request.json();

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "You are a helpful travel planner assistant. Provide detailed day-by-day itineraries including accommodations, activities, and transportation."
        },
        {
          role: "user",
          content: `Create a detailed travel plan for a trip to ${destination} from ${startDate} to ${endDate} with a ${budget} budget. Include specific daily activities, recommended accommodations, and transportation options.`
        }
      ],
    });

    const plan = completion.choices[0].message.content;
    
    await logRequest(
      { destination, startDate, endDate, budget },
      { plan },
      true,
      200
    );

    return NextResponse.json({ plan });
  } catch (error) {
    console.error('Error generating travel plan:', error);
    
    await logRequest(
      { destination, startDate, endDate, budget },
      { error: 'Error generating travel plan' },
      false,
      500
    );

    return NextResponse.json({ error: 'Error generating travel plan' }, { status: 500 });
  }
}

================
File: components/HeroSection.tsx
================
'use client';

import Image from 'next/image'
import { motion } from 'framer-motion'

const destinations = [
  { 
    name: 'Paris', 
    image: 'https://images.unsplash.com/photo-1502602898657-3e91760cbb34?w=500&q=80'
  },
  { 
    name: 'Tokyo', 
    image: 'https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?w=500&q=80'
  },
  { 
    name: 'New York', 
    image: 'https://images.unsplash.com/photo-1522083165195-3424ed129620?w=500&q=80'
  },
]

const HeroSection = () => {
  return (
    <section className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center py-20 bg-translucent rounded-lg shadow-lg">
      <h1 className="text-4xl font-bold mb-12 text-shadow">
        Plan Your Dream Trip with Plan My Trip
      </h1>
      <div className="flex flex-wrap justify-center gap-8 mb-12">
        {destinations.map((destination, index) => (
          <motion.div
            key={destination.name}
            className="bg-transparent rounded-lg overflow-hidden shadow-lg w-full sm:w-72 group"
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: index * 0.2 }}
            whileHover={{ scale: 1.05 }}
          >
            <div className="relative">
              <Image
                src={destination.image}
                alt={destination.name}
                width={400}
                height={300}
                className="w-full h-60 object-cover rounded-t-lg transition-transform duration-300 group-hover:scale-105"
              />
              <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-b from-transparent to-black/50 rounded-b-lg">
                <h3 className="text-xl font-semibold text-white">{destination.name}</h3>
              </div>
            </div>
          </motion.div>
        ))}
      </div>
      <p className="text-xl text-white mb-8 text-shadow">
        Let our advanced AI create the perfect itinerary for your next adventure
      </p>
      <a
        href="#planner"
        className="bg-gradient-to-r from-blue-600 to-teal-500 text-white px-6 py-3 rounded-lg hover:from-blue-700 hover:to-teal-600 transition duration-300 shadow-md inline-block"
      >
        Start Planning
      </a>
    </section>
  )
}

export default HeroSection

================
File: components/LoadingAnimation.tsx
================
import { motion } from 'framer-motion';

export default function LoadingAnimation() {
  return (
    <div className="flex flex-col items-center justify-center h-screen">
      <motion.div
        animate={{
          scale: [1, 2, 2, 1, 1],
          rotate: [0, 0, 270, 270, 0],
          borderRadius: ["20%", "20%", "50%", "50%", "20%"],
        }}
        transition={{
          duration: 2,
          ease: "easeInOut",
          times: [0, 0.2, 0.5, 0.8, 1],
          repeat: Infinity,
          repeatDelay: 1
        }}
        className="w-16 h-16 bg-blue-500"
      />
      <p className="mt-4 text-xl font-semibold">Generating your travel plan...</p>
    </div>
  );
};

================
File: components/TravelPlannerForm.tsx
================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';

const TravelPlannerForm = () => {
  const [destination, setDestination] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [budget, setBudget] = useState('');
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const requestData = {
      destination,
      startDate,
      endDate,
      budget
    };

    try {
      const response = await fetch('/api/generatePlan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      if (!response.ok) {
        throw new Error('Failed to generate plan');
      }

      const data = await response.json();
      router.push(`/plan?destination=${encodeURIComponent(destination)}&startDate=${startDate}&endDate=${endDate}&budget=${budget}`);
    } catch (error) {
      console.error('Error generating plan:', error);
      // Handle error (e.g., show an error message to the user)
    }
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-lg mx-auto my-10 bg-translucent p-8 rounded-lg shadow-lg transition-all duration-300 ease-in-out hover:shadow-xl" id="planner">
      <div className="mb-4">
        <label htmlFor="destination" className="block form-label font-bold mb-2">
          Destination
        </label>
        <input
          type="text"
          id="destination"
          value={destination}
          onChange={(e) => setDestination(e.target.value)}
          className="w-full px-3 py-2 form-input rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 ease-in-out"
          required
        />
      </div>
      <div className="mb-4">
        <label htmlFor="startDate" className="block form-label font-bold mb-2">
          Start Date
        </label>
        <input
          type="date"
          id="startDate"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          className="w-full px-3 py-2 form-input rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 ease-in-out"
          required
        />
      </div>
      <div className="mb-4">
        <label htmlFor="endDate" className="block form-label font-bold mb-2">
          End Date
        </label>
        <input
          type="date"
          id="endDate"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          className="w-full px-3 py-2 form-input rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 ease-in-out"
          required
        />
      </div>
      <div className="mb-4">
        <label htmlFor="budget" className="block form-label font-bold mb-2">
          Budget Range
        </label>
        <select
          id="budget"
          value={budget}
          onChange={(e) => setBudget(e.target.value)}
          className="w-full px-3 py-2 form-input rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 ease-in-out"
          required
        >
          <option value="">Select a budget range</option>
          <option value="budget">Budget ($)</option>
          <option value="moderate">Moderate ($$)</option>
          <option value="luxury">Luxury ($$$)</option>
        </select>
      </div>
      <button
        type="submit"
        className="w-full bg-gradient-to-r from-blue-600 to-teal-500 text-white py-2 px-4 rounded-lg hover:from-blue-700 hover:to-teal-600 transition-all duration-300 ease-in-out"
      >
        Generate Trip Plan
      </button>
    </form>
  );
};

export default TravelPlannerForm;

================
File: components/TripPlan.tsx
================
import { motion } from 'framer-motion';

interface TripPlanProps {
  plan: string;
}

const TripPlan: React.FC<TripPlanProps> = ({ plan }) => {
  const paragraphs = plan.split('\n\n');

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="bg-gray-100 shadow-md rounded-lg p-6"
    >
      {paragraphs.map((paragraph, index) => (
        <motion.div
          key={index}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: index * 0.1 }}
          className="mb-6 bg-white rounded-lg p-4 shadow"
        >
          <p className="text-gray-800 leading-relaxed">{paragraph}</p>
        </motion.div>
      ))}
    </motion.div>
  );
};

export default TripPlan;

================
File: plan/page.tsx
================
'use client';

import { useSearchParams } from 'next/navigation';
import { useEffect, useState } from 'react';
import TripPlan from '@/app/components/TripPlan';
import LoadingAnimation from '@/app/components/LoadingAnimation';

export default function PlanPage() {
  const searchParams = useSearchParams();
  const [plan, setPlan] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const destination = searchParams.get('destination');
    const startDate = searchParams.get('startDate');
    const endDate = searchParams.get('endDate');
    const budget = searchParams.get('budget');

    const generatePlan = async () => {
      setLoading(true);
      try {
        const response = await fetch('/api/generatePlan', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ destination, startDate, endDate, budget }),
        });
        if (!response.ok) {
          throw new Error('Failed to generate plan');
        }
        const data = await response.json();
        setPlan(data.plan);
      } catch (error) {
        console.error('Error generating plan:', error);
        // You might want to set an error state here and display it to the user
      } finally {
        setLoading(false);
      }
    };

    generatePlan();
  }, [searchParams]);

  if (loading) {
    return <LoadingAnimation />;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Your Travel Plan</h1>
      {plan && <TripPlan plan={plan} />}
    </div>
  );
}

================
File: Footer.tsx
================
const Footer = () => {
  return (
    <footer className="bg-sky-900 bg-opacity-5 text-white py-8">
      <div className="container mx-auto px-4">
        <div className="flex flex-wrap justify-between items-center">
          <div className="w-full md:w-1/3 text-center md:text-left mb-4 md:mb-0">
            <h2 className="text-lg font-bold">Plan My Trip</h2>
            <p className="mt-2 text-sky-200">Plan your perfect trip with AI assistance</p>
          </div>
          <div className="w-full md:w-1/3 text-center mb-4 md:mb-0">
            <h3 className="text-lg font-bold mb-2">Quick Links</h3>
            <ul className="flex justify-center space-x-4">
              <li><a href="/" className="hover:text-sky-200 transition-colors duration-300">Home</a></li>
              <li><a href="/about" className="hover:text-sky-200 transition-colors duration-300">About</a></li>
              <li><a href="/contact" className="hover:text-sky-200 transition-colors duration-300">Contact</a></li>
            </ul>
          </div>
          <div className="w-full md:w-1/3 text-center md:text-right">
            <h3 className="text-lg font-bold mb-2">Connect With Us</h3>
            <div className="flex justify-center md:justify-end space-x-4">
              <a href="#" className="hover:text-sky-200 transition-colors duration-300">Facebook</a>
              <a href="#" className="hover:text-sky-200 transition-colors duration-300">Twitter</a>
              <a href="#" className="hover:text-sky-200 transition-colors duration-300">Instagram</a>
            </div>
          </div>
        </div>
        <div className="mt-8 text-center text-sky-200">
          <p>&copy; 2024 Plan My Trip. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

================
File: globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground: #ffffff;
  --background-overlay: rgba(0, 0, 0, 0.3);
  --form-bg: rgba(255, 255, 255, 0.15);
  --form-text: #ffffff;
  --form-input-bg: rgba(255, 255, 255, 0.2);
  --form-input-text: #ffffff;
}

body {
  color: var(--foreground);
  font-family: 'Geist Sans', Arial, Helvetica, sans-serif;
  background-image: url('/nature-overlay.jpg');
  background-size: cover;
  background-attachment: fixed;
  background-position: center;
  min-height: 100vh;
}

/* Existing styles */
@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

#planner {
  animation: fadeInUp 0.5s ease-out;
}

html {
  scroll-behavior: smooth;
}

.bg-blur {
  backdrop-filter: blur(8px);
  background-color: var(--background-overlay);
}

/* Header and Footer styles */
header,
footer {
  background-color: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(5px);
}

/* Additional styles for better contrast and readability */
.text-shadow {
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
}

.bg-translucent {
  background-color: var(--form-bg);
  backdrop-filter: blur(10px);
}

.form-input {
  background-color: var(--form-input-bg);
  color: var(--form-input-text);
  border: 1px solid rgba(255, 255, 255, 0.3);
}

.form-input::placeholder {
  color: rgba(255, 255, 255, 0.7);
}

.form-label {
  color: var(--form-text);
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
}

================
File: Header.tsx
================
import Link from 'next/link';
import { Home, Info, Phone, Globe } from 'lucide-react';

const Header = () => {
  return (
    <header className="bg-sky-100 bg-opacity-5 shadow-md">
      <nav className="container mx-auto px-6 py-4">
        <div className="flex justify-between items-center">
          <Link href="/" className="text-2xl font-bold text-white hover:text-sky-200 transition-colors duration-300 flex items-center">
            <Globe className="w-6 h-6 mr-2" />
            <span>Plan My Trip</span>
          </Link>
          <div className="space-x-6">
            <Link href="/" className="text-white hover:text-sky-200 transition-colors duration-300 flex items-center">
              <Home className="w-5 h-5 mr-1" />
              <span>Home</span>
            </Link>
            <Link href="/about" className="text-white hover:text-sky-200 transition-colors duration-300 flex items-center">
              <Info className="w-5 h-5 mr-1" />
              <span>About</span>
            </Link>
            <Link href="/contact" className="text-white hover:text-sky-200 transition-colors duration-300 flex items-center">
              <Phone className="w-5 h-5 mr-1" />
              <span>Contact</span>
            </Link>
          </div>
        </div>
      </nav>
    </header>
  );
};

export default Header;

================
File: layout.tsx
================
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import Header from "./Header";
import Footer from "./Footer";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "AI Travel Planner",
  description: "Plan your perfect trip with AI assistance",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <div className="bg-image"></div>
        <div className="main-content">
          <Header />
          <main className="min-h-screen py-8">
            {children}
          </main>
          <Footer />
        </div>
      </body>
    </html>
  );
}

================
File: nature-overlay.jpg:Zone.Identifier
================
[ZoneTransfer]
ZoneId=3
HostUrl=https://www.wallpaperflare.com/

================
File: page.tsx
================
import HeroSection from './components/HeroSection';
import TravelPlannerForm from './components/TravelPlannerForm';

export default function Home() {
  return (
    <div className="container mx-auto px-4">
      <HeroSection />
      <TravelPlannerForm />
    </div>
  );
}

================
File: travel-background.jpg:Zone.Identifier
================
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://www.google.com/
HostUrl=https://assets.bucketlistly.blog/sites/5adf778b6eabcc00190b75b1/content_entry5b155bed5711a8176e9f9783/5c4fbe2246025317508def41/files/nepal-everest-base-camp-everest-travel-photo-20190128094442660-main-image.jpg

================
File: traveler.png:Zone.Identifier
================
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://www.google.com/
HostUrl=https://w7.pngwing.com/pngs/1021/1008/png-transparent-taman-negara-travel-hotel-package-tour-tourism-travel-photography-girl-business.png
